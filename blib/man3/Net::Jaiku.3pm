.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Jaiku 3pm"
.TH Net::Jaiku 3pm "2007-05-21" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Net::Jaiku \- A perl interface to jaiku.com's API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Net::Jaiku;
.Ve
.PP
.Vb 4
\&        my $jaiku = new Net::Jaiku(
\&                username => 'Example',
\&                userkey  => 'API Key'
\&        );
.Ve
.PP
.Vb 2
\&        my $p = $jaiku\->getMyPresence;
\&        print $p\->user\->url;
.Ve
.PP
.Vb 1
\&        my $rv = $jaiku\->setPresence('Reading a book');
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This module allows easy access to Feeds, Presences and Users at
jaiku.com. It requires an \s-1API\s0 key retreivable from http://api.jaiku.com/
for each username you wish to authenticate.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
This module has a single constructor:
.ie n .IP "* ""new( ... )""" 4
.el .IP "* \f(CWnew( ... )\fR" 4
.IX Item "new( ... )"
The \f(CW\*(C`new\*(C'\fR constructor takes the following attributes:
.RS 4
.ie n .IP "* ""<username =""\fR \f(CW$string>>" 4
.el .IP "* \f(CW<username =\fR \f(CW$string\fR>>" 4
.IX Item "<username = $string>>"
This is a jaiku.com username. \fIthis bit\fR.jaiku.com
.ie n .IP "* ""<userkey =""\fR \f(CW$string>>" 4
.el .IP "* \f(CW<userkey =\fR \f(CW$string\fR>>" 4
.IX Item "<userkey = $string>>"
The user's key can be obtained by visiting http://api.jaiku.com when
logged in as the user.
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
Net::Jaiku has the following methods:
.Sh "Feeds"
.IX Subsection "Feeds"
.ie n .IP "* ""getFeed()""" 4
.el .IP "* \f(CWgetFeed()\fR" 4
.IX Item "getFeed()"
Returns the public feed as seen on the front page.
.ie n .IP "* ""getUserFeed( user =""\fR \f(CW$string )>" 4
.el .IP "* \f(CWgetUserFeed( user =\fR \f(CW$string\fR )>" 4
.IX Item "getUserFeed( user = $string )>"
Returns a hashref of the feed for the given user. If no user is
specified, it will return the feed for the current user. If no
user is logged it, it will return undef.
.ie n .IP "* ""getMyFeed()""" 4
.el .IP "* \f(CWgetMyFeed()\fR" 4
.IX Item "getMyFeed()"
A shortcut to the above method for the logged in user. If no
user is logged it, it will return undef.
.ie n .IP "* ""getContactsFeed()""" 4
.el .IP "* \f(CWgetContactsFeed()\fR" 4
.IX Item "getContactsFeed()"
Retrieve a feed of all your contacts and their presences.
.IP "* \fB\s-1RETURN\s0 \s-1VALUE\s0\fR" 4
.IX Item "RETURN VALUE"
Feed methods return an object representing the feed. The following
keys are available:
.RS 4
.IP "* title" 4
.IX Item "title"
.PD 0
.IP "* url" 4
.IX Item "url"
.IP "* stream[n]\->icon" 4
.IX Item "stream[n]->icon"
.IP "* stream[n]\->content" 4
.IX Item "stream[n]->content"
.IP "* stream[n]\->created_at" 4
.IX Item "stream[n]->created_at"
.IP "* stream[n]\->created_at_relative" 4
.IX Item "stream[n]->created_at_relative"
.IP "* stream[n]\->comments" 4
.IX Item "stream[n]->comments"
.IP "* stream[n]\->url" 4
.IX Item "stream[n]->url"
.IP "* stream[n]\->id" 4
.IX Item "stream[n]->id"
.IP "* stream[n]\->title" 4
.IX Item "stream[n]->title"
.RE
.RS 4
.RE
.PD
.Sh "Presences"
.IX Subsection "Presences"
.ie n .IP "* ""getUserPresence( user =""\fR \f(CW$string )>" 4
.el .IP "* \f(CWgetUserPresence( user =\fR \f(CW$string\fR )>" 4
.IX Item "getUserPresence( user = $string )>"
Returns the 'presence' for the given user. If no user is
specified, it will return the feed for the current user. If no
user is logged it, it will return undef.
.ie n .IP "* ""getMyPresence()""" 4
.el .IP "* \f(CWgetMyPresence()\fR" 4
.IX Item "getMyPresence()"
A shortcut to the above method for the logged in user. If no
user is logged it, it will return undef.
.IP "* \fB\s-1RETURN\s0 \s-1VALUE\s0\fR" 4
.IX Item "RETURN VALUE"
Presence methods return an object representing the presence. The
following keys are available:
.RS 4
.IP "* line" 4
.IX Item "line"
.PD 0
.IP "* user\->avatar" 4
.IX Item "user->avatar"
.IP "* user\->url" 4
.IX Item "user->url"
.IP "* user\->nick" 4
.IX Item "user->nick"
.IP "* user\->first_name" 4
.IX Item "user->first_name"
.IP "* user\->last_name" 4
.IX Item "user->last_name"
.RE
.RS 4
.RE
.PD
.Sh "User Info"
.IX Subsection "User Info"
.ie n .IP "* ""getUserInfo( user =""\fR \f(CW$string )>" 4
.el .IP "* \f(CWgetUserInfo( user =\fR \f(CW$string\fR )>" 4
.IX Item "getUserInfo( user = $string )>"
Returns information for the given user. If no user is
specified, it will return the feed for the current user. If no
user is logged it, it will return undef.
.ie n .IP "* ""getMyInfo()""" 4
.el .IP "* \f(CWgetMyInfo()\fR" 4
.IX Item "getMyInfo()"
A shortcut to the above method for the logged in user. If no
user is logged it, it will return undef.
.IP "* \fB\s-1RETURN\s0 \s-1VALUE\s0\fR" 4
.IX Item "RETURN VALUE"
Info methods return an object representing the information. The
following keys are available:
.RS 4
.IP "* avatar" 4
.IX Item "avatar"
.PD 0
.IP "* url" 4
.IX Item "url"
.IP "* nick" 4
.IX Item "nick"
.IP "* first_name" 4
.IX Item "first_name"
.IP "* last_name" 4
.IX Item "last_name"
.IP "* contacts[n]\->avatar" 4
.IX Item "contacts[n]->avatar"
.IP "* contacts[n]\->url" 4
.IX Item "contacts[n]->url"
.IP "* contacts[n]\->nick" 4
.IX Item "contacts[n]->nick"
.IP "* contacts[n]\->first_name" 4
.IX Item "contacts[n]->first_name"
.IP "* contacts[n]\->last_name" 4
.IX Item "contacts[n]->last_name"
.RE
.RS 4
.RE
.PD
.SH "SETTERS AND GETTERS"
.IX Header "SETTERS AND GETTERS"
.ie n .IP "* ""username( $optional_new_username )""" 4
.el .IP "* \f(CWusername( $optional_new_username )\fR" 4
.IX Item "username( $optional_new_username )"
Returns the current username (after optionally setting)
.ie n .IP "* ""userkey( $optional_new_userkey )""" 4
.el .IP "* \f(CWuserkey( $optional_new_userkey )\fR" 4
.IX Item "userkey( $optional_new_userkey )"
Returns the current username (after optionally setting)
.SH "NOTES"
.IX Header "NOTES"
.Sh "Objects"
.IX Subsection "Objects"
This module returns a custom object called 'HashInflator'. This is used
so you can do \f(CW$rv\fR\->user\->id rather than the more cumbersome \f(CW$rv\fR\->{user}\->{id}
.PP
Once the \s-1API\s0 settles down, I will investigate creating proper objects that
will auto-inflate when they need to.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rick Measham <rickm@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007 Rick Measham.  All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file included
with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
irc://freenode.net/##jaiku
